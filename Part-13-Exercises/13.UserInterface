package TicTacToe;

import java.util.ArrayList;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class UserInterface extends Application {

    String currentPlayer = "X";
    ArrayList<Button> buttons = new ArrayList<>();

    @Override
    public void start(Stage arg0) throws Exception {
        BorderPane layout = new BorderPane();
        GridPane gameBoard = new GridPane();
        Label turn = new Label("Turn: " + currentPlayer);
        turn.setFont(Font.font("Monospaced", 25));
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                Button btn = new Button();
                btn.setFont(Font.font("Monospaced", 25));
                btn.setMinHeight(50);
                btn.setMinWidth(50);
                //btn.setMinSize(70, 70);
                //btn.setMaxSize(70, 70);
                buttons.add(btn);
                btn.setOnMouseClicked((event) -> {
                    if (turn.getText().startsWith("Winner: ") || turn.getText().equals("It's a draw!")) {
                        btn.disarm();
                    } else if (btn.getText().isEmpty()) {
                        //otherwise it checks if the button is empty (not used by the other player)
                        btn.setText(currentPlayer); //and sets the current player variable to it
                        if (checkIfWinner()) {
                            //if there's a winner it sets the status label to represent the change
                            turn.setText("Winner: " + currentPlayer);
                        } else if(allBoxesAreFilled()) {
                            //otherwise if all the boxes are filled it displays a message that it's a draw
                            turn.setText("It's a draw!");
                        } else {
                            //if the game is still ongoing, the turn changes to the next player and the status
                            //label reflects the next player's turn
                            if (currentPlayer.equals("X")) {
                                currentPlayer = "O";
                            } else if (currentPlayer.equals("O")) {
                                currentPlayer = "X";
                            }
                            turn.setText("Turn: " + currentPlayer);
                        }
                    }
                });
            }
        }
        gameBoard.add(buttons.get(0), 0, 0);
		gameBoard.add(buttons.get(1), 0, 1);
		gameBoard.add(buttons.get(2), 0, 2);
		gameBoard.add(buttons.get(3), 1, 0);
		gameBoard.add(buttons.get(4), 1, 1);
		gameBoard.add(buttons.get(5), 1, 2);
		gameBoard.add(buttons.get(6), 2, 0);
		gameBoard.add(buttons.get(7), 2, 1);
		gameBoard.add(buttons.get(8), 2, 2);
        gameBoard.setHgap(10);
		gameBoard.setVgap(10);

        layout.setTop(turn);
        layout.setBottom(gameBoard);
        layout.setPadding(new Insets(10, 10, 10 , 10));
        
        Scene ticTacToe = new Scene(layout);
        arg0.setScene(ticTacToe);
        arg0.show();
    }

    private boolean allBoxesAreFilled() {
        for(Button button : buttons) {
            if(button.getText().equals("")) {
                return false;
            }
        }
        return true;
    }

    private boolean checkIfWinner() {
		//checks the first vertical column for a winner
		if (!buttons.get(0).getText().isEmpty() && ((buttons.get(0).getText().equals(buttons.get(1).getText()))
				&& (buttons.get(0).getText().equals(buttons.get(2).getText())))) {
			return true;
		}
		//checks the second vertical column
		if (!buttons.get(3).getText().isEmpty() && ((buttons.get(3).getText().equals(buttons.get(4).getText()))
				&& (buttons.get(3).getText().equals(buttons.get(5).getText())))) {
			return true;
		}
		//checks the third vertical column
		if (!buttons.get(6).getText().isEmpty() && ((buttons.get(6).getText().equals(buttons.get(7).getText()))
				&& (buttons.get(6).getText().equals(buttons.get(8).getText())))) {
			return true;
		}
		//checks first horizontal row for a winner
		if (!buttons.get(0).getText().isEmpty() && ((buttons.get(0).getText().equals(buttons.get(3).getText()))
				&& (buttons.get(0).getText().equals(buttons.get(6).getText())))) {
			return true;
		}
		//checks second horizontal row for a winner
		if (!buttons.get(1).getText().isEmpty() && ((buttons.get(1).getText().equals(buttons.get(4).getText()))
				&& (buttons.get(1).getText().equals(buttons.get(7).getText())))) {
			return true;
		}
		//checks third horizontal row for a winner
		if (!buttons.get(2).getText().isEmpty() && ((buttons.get(2).getText().equals(buttons.get(5).getText()))
				&& (buttons.get(2).getText().equals(buttons.get(8).getText())))) {
			return true;
		}
        //checks for first horizontal for a winner
		if (!buttons.get(0).getText().isEmpty() && ((buttons.get(0).getText().equals(buttons.get(4).getText()))
                && (buttons.get(0).getText().equals(buttons.get(8).getText())))) {
        return true;
        }
        //checks for second horizontal for a winner
        if (!buttons.get(2).getText().isEmpty() && ((buttons.get(2).getText().equals(buttons.get(4).getText()))
                && (buttons.get(2).getText().equals(buttons.get(6).getText())))) {
            return true;
        }
        return false;
    }
    
    public static void main(String[] args) {
        launch(UserInterface.class);
    }
}
