import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

public class UserInterface {

    private Scanner scanner;
    private ArrayList<Recipe> recipes;
    private ArrayList<String> list;

    public UserInterface() {
        this.scanner = new Scanner(System.in);
        this.list = new ArrayList<>();
        this.recipes = new ArrayList<>();
    }

    public void start() {
        System.out.print("File to read: ");
        String file = scanner.nextLine();
        this.readFromFile(file);
        System.out.println();

        while(true) {
            System.out.println("Commands:" + "\n" + "list - lists the recipes" + "\n" + "stop - stops the program");
            System.out.println("find name - searches recipes by name");
            System.out.println("find cooking time - searches recipes by cooking time");
            System.out.println("find ingredient - searches recipes by ingredient");
            System.out.println();
            System.out.print("Enter command: ");
            String command = scanner.nextLine();

            if(command.equals("stop")) {
                break;
            }

            if(command.equals("list")) {
                System.out.println();
                System.out.println("Recipes:");
                for (Recipe recipe : recipes) {
                    System.out.println(recipe.toString());
                }
                System.out.println();
            }

            if(command.equals("find name")) {
                System.out.print("Searched word: ");
                String word = scanner.nextLine();
                System.out.println();
                ArrayList<Recipe> searchedNameRecipes = searchName(word, recipes);
                System.out.println("Recipes:");
                for (Recipe recipe : searchedNameRecipes) {
                    System.out.println(recipe.toString());
                }
                System.out.println();
            }

            if(command.equals("find cooking time")) {
                System.out.print("Max cooking time: ");
                int time = Integer.valueOf(scanner.nextLine());
                System.out.println();
                ArrayList<Recipe> searchedTimeRecipes = searchTime(time, recipes);
                System.out.println("Recipes:");
                for (Recipe recipe : searchedTimeRecipes) {
                    System.out.println(recipe.toString());
                }
                System.out.println();
            }

            if(command.equals("find ingredient")) {
                System.out.print("Ingredient: ");
                String ingredient = scanner.nextLine();
                System.out.println();
                ArrayList<Recipe> searchedIngredientRecipes = searchIngredient(ingredient, recipes);
                System.out.println("Recipes:");
                for (Recipe recipe : searchedIngredientRecipes) {
                    System.out.println(recipe.toString());
                }
                System.out.println();
            }
        }
    }

    public void readFromFile(String file) {
        try(Scanner reader = new Scanner(Paths.get(file))){
            while(reader.hasNextLine()){
                String line = reader.nextLine();
                this.list.add(line);
            }
        } catch (Exception e) {
            System.out.println("An error occured " + e);
        }
        this.addToRecipes();
    }

    public void addToRecipes() {
        int i = 0;
        while(i < list.size()) {
            ArrayList<String> ingredients = new ArrayList<>();
            if(list.get(i).isEmpty())
            {
                i++;
                continue;
            }
            String name = list.get(i);
            i++;
            String time = list.get(i);
            i++;
            for(i = i; i < list.size() && !list.get(i).isEmpty(); i++) {
                ingredients.add(list.get(i));
            }
            this.recipes.add(new Recipe(name, Integer.valueOf(time), ingredients));
        }
    }

    public ArrayList<Recipe> searchName(String word, ArrayList<Recipe> recipes) {
        ArrayList<Recipe> searchedRecipes = new ArrayList<>();
        for (Recipe recipe: recipes) {
            if(recipe.getName().contains(word)) {
                searchedRecipes.add(recipe);
            }
        }
        return searchedRecipes;
    }

    public ArrayList<Recipe> searchTime(int time, ArrayList<Recipe> recipes) {
        ArrayList<Recipe> searchedRecipes = new ArrayList<>();
        for (Recipe recipe: recipes) {
            if(recipe.getTime() <= time) {
                searchedRecipes.add(recipe);
            }
        }
        return searchedRecipes;
    }

    public ArrayList<Recipe> searchIngredient(String ingredient, ArrayList<Recipe> recipes) {
        ArrayList<Recipe> searchedRecipes = new ArrayList<>();
        for (Recipe recipe: recipes) {
            if(recipe.getIngredients().contains(ingredient)) {
                searchedRecipes.add(recipe);
            }
        }
        return searchedRecipes;
    }
}